# -*- coding: utf-8 -*-
"""Stroke_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ggLQLTnvDhV_-fmZOSGpX6ZnWzUiFbjr
"""

!pip install empiricaldist



"""Stroke Prediction (Basic EDA)

Informasi Kumpulan Data:
Dataset ini digunakan untuk memprediksi apakah pasien kemungkinan terkena stroke berdasarkan parameter input seperti jenis kelamin, usia, berbagai penyakit, dan status merokok. Setiap baris dalam data memberikan informasi yang relevan tentang pasien.

"""

Attribute Information

id
unique identifier
gender
Male
Female
Other
age
age of the patient
hypertension
1 if the patient has hypertension
0 if the patient doesn't have hypertension
heart_disease
1 if the patient has a heart disease
0 if the patient doesn't have any heart diseases
ever_married
Yes
No
work_type
children
Govt_job
Never_worked
Private
Self-employed
Residence_type
Rural
Urban
avg_glucose_level
average glucose level in blood
bmi
body mass index
smoking_status
formerly smoked
never smoked
smokes
Unknown if the information is unavailable for this patient
stroke
1 if the patient has had a stroke
0 if the patient has not had a stroke

"""Menurut Organisasi Kesehatan Dunia (WHO) stroke adalah penyebab kematian ke-2 secara global, bertanggung jawab atas sekitar 11% dari total kematian. Dataset ini digunakan untuk memprediksi apakah pasien kemungkinan terkena stroke berdasarkan parameter input seperti jenis kelamin, usia, berbagai penyakit, dan status merokok. Setiap baris dalam data memberikan informasi yang relevan tentang pasien. Ada total 11 fitur klinis untuk memprediksi kejadian stroke

2. Importing Libraries
!pip install empiricaldist
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
from empiricaldist import Pmf, Cdf

import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline
plt.style.use('fivethirtyeight')
plt.rc('patch', edgecolor='black')
sns.set_style('whitegrid')
sns.set_context("notebook", font_scale=1.3, rc={"lines.linewidth": 1.5})

"""3. Reading Dataset

"""

import pandas as pd
from google.colab import files
filenya=files.upload()

filenya

#convert file into dataset
data = pd.read_csv('healthcare-dataset-stroke-data.csv')
#explore first five rows in the dataset
data.head()

data.rename(columns={'Residence_type':'residence_type'}, inplace=True)
data.head()

"""Ubah ke Huruf Kecil
Kolom Residence_type memiliki huruf besar pada karakter pertama. Saya akan mengganti nama kolom, hanya untuk membuatnya lebih konsisten.

Ada beberapa titik data yang memiliki karakter huruf besar. Karena menggunakan huruf besar tidak diperlukan dalam kasus ini, saya akan mengubahnya menjadi huruf kecil.
Pada titik tertentu, itu akan mencegah saya melakukan perhitungan yang salah.
Misalnya Urban dan Urban akan diperlakukan sebagai nilai yang berbeda (kategori yang berbeda untuk kasus ini) meskipun sebenarnya memiliki arti yang sama.
"""

column_list = ['gender', 'ever_married', 'work_type', 'residence_type', 'smoking_status']

for col in column_list:
    data[col] = data[col].str.lower()
    
data.head()

#4. Basic Data Exploratory
data_type = pd.DataFrame(data.dtypes).T.rename({0:'data types'})
data_type

#Categorical Value
data_count = pd.DataFrame(data.count()).T.rename({0:'total data'})
data_count

#Null Value
data_null_total = pd.DataFrame(data.isna().sum()).T.rename({0:'total null'})
data_null_total

#Null Values Percentage
data_null_percentage = pd.DataFrame(100*data.isna().sum()/data.shape[0]).T.rename({0:'percentage null'})
data_null_percentage

#Data Info
data_info = pd.concat([data_type, data_count, data_null_total, data_null_percentage.round(2)], axis=0)
data_info

#It's similar to info() method, but in different representation.
data.info()

#Duplicate Values
data.duplicated().sum()

"""Our dataset doesn't have any duplicate values. It's a good sign."""

#5.Data Distribution
#Categorical Data
data.drop('id', axis=1, inplace=True)
data.head()

"""Dari keluaran ini, kita tahu bahwa beberapa atribut bersifat kategorikal, seperti:



gender
hypertension
heart_disease
ever_married
work_type
reisdence_type
smoking_status
stroke
Walaupun di deskripsi dataset sudah disebutkan apa saja kategori dari masing-masing atribut, akan lebih baik jika kita melakukan pengecekan ulang.
"""

column_list = ['gender', 'hypertension', 'heart_disease',
               'ever_married', 'work_type', 'residence_type',
               'smoking_status', 'stroke']

for col in column_list:
  display(pd.DataFrame(data[col].value_counts()).style.background_gradient(vmin=0, subset=col))

"""Ini sebenarnya bukan plot, tapi tabel dengan gradasi warna seperti ini bisa memberi kita wawasan tentang distribusi kategori. Semakin gelap, semakin banyak data dalam kategori."""

#Pivot tabel
#Probability Mass Function
#The categorical data only contain a few categories, so we can use the probability mass function to see the distribution of categories.
for col in column_list:
  pmf_data = Pmf.from_seq(data[col], normalize=True)
  pmf_data = pd.DataFrame({col:pmf_data.index, 'pmf':pmf_data.values})
  pmf_data.set_index(col, inplace=True)
  display(pmf_data.style.background_gradient(vmin=0, subset='pmf'))

fig, ax = plt.subplots(3, 3, figsize=(12,12))
axes_list = [axes for axes_row in ax for axes in axes_row]

for i, col in enumerate(column_list):
  pmf_data = Pmf.from_seq(data[col], normalize=True)
  pmf_data = pd.DataFrame({col:pmf_data.index, 'pmf':pmf_data})

  sns.barplot(data=pmf_data, x=col, y='pmf', ax=axes_list[i])
  axes_list[i].set_title(f'PMF of {col}')
  axes_list[i].set_xlabel('')
  axes_list[i].set_ylabel('')
  plt.setp(axes_list[i].get_xticklabels(), rotation='vertical')

axes_list[-1].set_visible(False)
plt.tight_layout()
plt.show()

"""Dari plot ini, kita dapat melihat bahwa:

Pada plot jenis kelamin, kategori lainnya hampir tidak terlihat karena hanya memiliki 1 pasien
Berdasarkan plot hipertensi, sebagian besar pasien tidak memiliki hipertensi
Berdasarkan plot penyakit jantung, sebagian besar pasien tidak memiliki penyakit jantung
Pada plot work_type, kategori tidak pernah_bekerja hampir tidak terlihat karena hanya memuat 0,4% dari total pasien
Pada stroke plot yang merupakan target atribut distribusi kategori tidak berimbang
Tabel pivot
Saya hanya ingin tahu, jadi saya akan mencoba mencari tahu berapa banyak pasien yang tidak memiliki penyakit penyerta, hanya memiliki hipertensi, hanya memiliki penyakit jantung, atau memiliki hipertensi dan penyakit jantung sekaligus.
"""

pd.crosstab(index=[data['hypertension'], data['heart_disease']],
            columns=data['stroke'], margins=True).style.background_gradient(vmin=0)

#From this pivot table, we can see that most patients didn't have any comorbidities.
pd.crosstab(index=[data['hypertension'], data['heart_disease']],
            columns=data['stroke'], margins=True, normalize=True).round(3).style.background_gradient(vmin=0)

"""Sebagian besar pasien tidak memiliki penyakit penyerta
Sebagian besar pasien tidak mengalami stroke
Distribusi kategori tidak seimbang. Sebagian besar pasien tidak terkena stroke. Hanya sekitar 5% pasien yang mengalami stroke.
"""

pd.crosstab(index=data['residence_type'],
            columns=data['stroke'], normalize=True).round(3).style.background_gradient(vmin=0)

#From this pivot table, we know that the distribution between residence type is balanced.
pd.crosstab(index=data['smoking_status'],
            columns=data['stroke'], normalize=True).round(3).style.background_gradient(vmin=0)

"""Anehnya, sebagian besar pasien stroke tidak pernah merokok sebelumnya. Tapi, seperti yang sudah saya sebutkan, atribut stroke tidak seimbang. Sehingga dapat menimbulkan bias, karena kita tahu bahwa merokok itu tidak baik untuk kesehatan kita.

Tapi ya, pengetahuan kita (bahwa merokok itu tidak baik untuk kesehatan kita) juga bisa membiaskan analisis kita.

Bar Plot
Dari tabel pivot sebelumnya, kita dapat memahami distribusi data. Namun, beberapa orang (terutama mereka yang tidak mengerti secara teknis) mungkin tidak mengerti "Apa artinya 0? Bagaimana dengan 1?" pada indeks atau nama kolom. Jadi, saya akan memvisualisasikannya menggunakan bar plot

Selain itu, menyediakan tabel pivot yang penuh dengan angka terkadang bisa membuat orang lain kewalahan.
"""

# creating the logical conditions
conditions = [ ~(data['hypertension'] | data['heart_disease']).astype(bool),
              ((data['hypertension'] == 1) & (data['heart_disease'] == 0)).astype(bool),
              ((data['hypertension'] == 0) & (data['heart_disease'] == 1)).astype(bool),
              (data['hypertension'] & data['heart_disease']).astype(bool)]

# values for each conditions (if True)
values = ['No Comorbidities', 'Only Hypertension', 'Only Heart Disease', 'Both Comorbidities']

# assign the condition and the values
disease_check = np.select(conditions, values)
disease_category = pd.Series(disease_check)

mapping = {val: i for i, val in enumerate(values)}
key = disease_category.map(mapping)
# disease_category = disease_category.iloc[key.argsort()]

plt.figure(figsize=(12,6))
ax = sns.countplot(x=disease_category.iloc[key.argsort()])
# plt.xticks(rotation=45)
plt.setp(ax.get_xticklabels(), rotation=45)
plt.show()

#Just like on the pivot table, we can see that most patients ddin't have any comorbidities.
# create a new attribute
data['disease_category'] = disease_category

# change it to categorical data type, and sort it (just for better viz on the next step)
data['disease_category'] = data['disease_category'].astype('category')
data['disease_category'] = data['disease_category'].cat.set_categories(values)
data['disease_category'] = data['disease_category'].cat.set_categories(values)
data.sort_values(['disease_category'])

# plot the distribution of each category
plt.figure(figsize=(12,6))
# sns.histplot(data=data, x='disease_category', hue='stroke', multiple='stack').set_xlabel('')
# sns.histplot(data=data, x='disease_category', stat='density', hue='stroke', multiple='stack').set_xlabel('')
sns.countplot(data=data, x='disease_category', hue='stroke').set_xlabel('')
plt.show()

#The percentage of patient who had stroke is small, it's beacause the data distribution on stroke attribute is not balanced. Most of patient doesn't get stroke.
data_stroke = data[(data['stroke'] == 1)]
data_stroke['disease_category'].value_counts()/data['disease_category'].value_counts()

#Pie Chart
#Another way to see the portion of categories is using a pie chart. But, we must be very careful when using this chart type. Sometimes, it makes our visualization being ambiguous.
pie_data = disease_category.value_counts(normalize=True).values * 100
pie_label = [f'{l} ({s:0.1f}%)' for l, s in zip(values, pie_data)]

plt.figure(figsize=(12,6))
wedges, texts = plt.pie(pie_data, startangle=0, explode=[0.1, 0, 0, 0])
plt.axis('equal')
plt.legend(wedges, pie_label, title='Patient Comorbidities', loc='upper left', bbox_to_anchor=(1,0,0.5,1))
plt.tight_layout()
plt.show()



"""Seperti yang telah kita lihat, kebanyakan pasien tidak memiliki komorbiditas. Menggunakan diagram lingkaran bagus jika dapat memberi tahu kita dengan jelas tentang porsi data.

Data Numerik
Untuk data numerik, kita dapat menggunakan histogram dan kde (kernel density estimator) untuk melihat sebaran dan densitas data.
"""

data.head()

"""Dari keluaran ini, kita tahu bahwa beberapa atribut bersifat numerik, seperti:

age
avg_glucose_level
bmi
"""

#histogram
column_list = ['age', 'avg_glucose_level', 'bmi']

fig, ax = plt.subplots(1, 3, figsize=(12,6))

for i, col in enumerate(column_list):
  sns.histplot(data=data, x=col, hue='stroke', multiple='stack', ax=ax[i])

plt.tight_layout()
plt.show()

#Our dataset does not appear to be in a normal distribution, especially the avg_glucose_level and bmi attributes which have a right skewed form.
#density
fig, ax = plt.subplots(1, 3, figsize=(18,6))

for i, col in enumerate(column_list):
  sns.kdeplot(data=data, x=col, linewidth=3, hue='stroke', fill=True, multiple='stack', ax=ax[i])

plt.tight_layout()
plt.show()

"""Sekilas kita bisa melihat bahwa sebagian besar pasien yang terkena stroke berusia sekitar 60-80 tahun.

Kepadatan Histogram
Ini hanyalah cara lain untuk melihat plot histogram dan kde secara bersamaan.
"""

column_list = ['age', 'avg_glucose_level', 'bmi']

fig, ax = plt.subplots(1, 3, figsize=(12,6))

for i, col in enumerate(column_list):
  sns.histplot(data=data, x=col, stat='density', hue='stroke', multiple='stack', ax=ax[i])
  sns.kdeplot(data=data, x=col, linewidth=3, hue='stroke', fill=False, multiple='stack', ax=ax[i])

plt.tight_layout()
plt.show()

#Box Plot
#Box plot is very useful to see outliers on our dataset.
column_list = ['age', 'avg_glucose_level', 'bmi']

fig, ax = plt.subplots(1, 3, figsize=(12,6))

for i, col in enumerate(column_list):
  sns.boxplot(data=data, x=col, ax=ax[i])

plt.tight_layout()
plt.show()

#Using box plot, we can see there are many outliers on the avg_glucose_level and bmi attributes.
column_list = ['age', 'avg_glucose_level', 'bmi']

fig, ax = plt.subplots(1, 3, figsize=(12,6))

for i, col in enumerate(column_list):
  sns.boxplot(data=data, x='stroke', y=col, ax=ax[i])

plt.tight_layout()
plt.show()

"""Jika kita membagi data berdasarkan atribut stroke, kita mendapatkan beberapa wawasan penting:

Sebagian besar pasien yang mengalami stroke berusia di atas 60 tahun.
Tapi, tidak menutup kemungkinan anak muda juga bisa mengalaminya, seperti yang bisa kita lihat ada beberapa outlier
Dapat diasumsikan bahwa usia pasien memiliki korelasi apakah pasien terkena stroke atau tidak
Plot Pencar
Scatter plot biasanya digunakan untuk melihat korelasi antar atribut. Katakanlah, kami ingin mengetahui korelasi antara:

usia pasien dan kadar glukosa rata-rata
usia pasien dan BMI
"""

fig, ax = plt.subplots(1, 2, figsize=(12,6))

sns.scatterplot(data=data, x='age', y='avg_glucose_level', ax=ax[0])
sns.scatterplot(data=data, x='age', y='bmi', ax=ax[1])

plt.show()

"""Dari plot pencar ini, kami tidak dapat mengenali korelasi antara usia dan avg_glucose_level. Namun, usia dan BMI tampaknya memiliki korelasi.

Plot Regresi
Plot regresi dimaksudkan untuk menambahkan panduan visual yang membantu menekankan pola dalam suatu dataset.
"""

fig, ax = plt.subplots(1, 2, figsize=(12,6))

sns.regplot(data=data, x='age', y='avg_glucose_level', ax=ax[0], line_kws={'linewidth':3, 'color':'r'})
sns.regplot(data=data, x='age', y='bmi', ax=ax[1], line_kws={'linewidth':3, 'color':'r'})

plt.show()



"""Seperti yang bisa kita lihat, satu garis lurus (dari regresi linier orde pertama) tidak dapat menggambarkan pola dataset kita. Plot umur dan bmi sepertinya memiliki pola melengkung, jadi saya akan mencoba menggunakan urutan kedua."""

plt.figure(figsize=(12,12))
sns.lmplot(data=data, x='age', y='bmi', order=2, line_kws={'linewidth':3, 'color':'r'})

plt.show()

"""Dari plot ini, kita dapat melihat bahwa garis membentuk kurva. Kita dapat berasumsi bahwa usia pasien memiliki korelasi dengan BMI.

Plot Kontur
Menggunakan scatter plot, data kami kemungkinan besar akan overplotting. Untuk menghindarinya, kita bisa menggunakan plot kontur.
"""

fig, ax = plt.subplots(2, 2, figsize=(12,12))

sns.kdeplot(data=data, x='age', y='avg_glucose_level', ax=ax[0,0])
sns.kdeplot(data=data, x='age', y='bmi', ax=ax[0,1])

sns.kdeplot(data=data, x='age', y='avg_glucose_level', cmap='Blues', shade=True, thresh=0, ax=ax[1,0])
sns.kdeplot(data=data, x='age', y='bmi', cmap='Blues', shade=True, thresh=0, ax=ax[1,1])

plt.show()

#By using a contour plot, we can find out where the datapoints tend to cluster.
#Heatmap
#Another way to see correlation is using heatmap.
corr_matrix = data.corr().round(2)

mask = np.triu(np.ones_like(corr_matrix, dtype=bool))

plt.figure(figsize=(6,6))
sns.heatmap(corr_matrix, center=0, vmin=-1, vmax=1, mask=mask, annot=True, cmap='BrBG')
plt.show()

"""Dengan menggunakan peta panas, kita dapat dengan tepat memahami nilai korelasi. Seperti yang dapat kita lihat pada baris terakhir, atribut yang memiliki korelasi paling tinggi dengan stroke adalah usia pasien. Meskipun tidak terlalu tinggi, karena lebih dekat ke 0 daripada 1.

Peta panas ini juga menegaskan asumsi saya bahwa usia dan bmi memiliki korelasi. Anehnya, itu adalah korelasi tertinggi.

Plot Bersama
plot bersama digunakan untuk melihat histogram dan scatter plot sekaligus.
"""

plt.figure(figsize=(12,6))
sns.jointplot(data=data, x='age', y='avg_glucose_level')
plt.show()

plt.figure(figsize=(12,6))
sns.jointplot(data=data, x='age', y='bmi')
plt.show()

"""Pair Plot
This is another way to see the distribution of data. This plot also contains multiple histograms and scatter plots at once.
"""

sns.pairplot(data=data, hue='stroke')
plt.show()

"""Karena kumpulan data kami berisi banyak nilai kategori, sulit untuk menginterpretasikan keseluruhan plot.

Plot Biola
Sederhananya, ini seperti kombinasi plot kotak dan plot kepadatan.
"""

column_list = ['age', 'avg_glucose_level', 'bmi']

fig, ax = plt.subplots(1, 3, figsize=(12,6))

for i, col in enumerate(column_list):
  sns.violinplot(data=data, x='stroke', y=col, ax=ax[i])

plt.tight_layout()
plt.show()

"""Semakin tipis bodi biola, semakin sedikit data yang dikandungnya.
Pada titik tertentu, itu mungkin hanya garis. Saya tidak begitu yakin, tapi saya pikir itu outlier.

6.Kesimpulan
Sejauh ini, beberapa kesimpulan untuk dataset ini:

Sebagian besar pasien tidak memiliki penyakit penyerta (hipertensi dan atau penyakit jantung)
Target dataset ini (goresan) tidak seimbang. Sehingga akan mempengaruhi performa prediksi machine learning. Kita dapat menggunakan oversampling, undersampling, atau SMOTE untuk menangani masalah ini.
Data numerik tampaknya tidak berdistribusi normal, terutama atribut avg_glucose_level dan bmi yang memiliki bentuk miring ke kanan. Kita dapat menggunakan transformasi log, transformasi akar kuadrat, atau transformasi box-cox untuk menangani data miring.
Data numerik memiliki banyak outlier, terutama pada atribut avg_glucose_level dan bmi. Perlu lebih banyak diagnostik untuk menentukan apakah kita akan mempertahankan outlier atau menghapus outlier.
"""